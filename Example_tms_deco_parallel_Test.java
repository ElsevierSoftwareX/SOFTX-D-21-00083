package decolib.decompositions;

import decolib.blankets.Blanket;
import decolib.decompositions.results.DecompositionBlankets;
import org.fest.assertions.Assertions;
import org.junit.Test;

public class Example_tms_deco_parallel_Test
{
  // This example shows the parallel decomposition for function derived from MCNC Benchmark "tms", obtained
  // after performing a few decompositions on original function. In this case the functions shown below
  // in test methods are a part of multiple-valued network, which was created during that process.

  @Test
  public void parallelDecomposition_test1()
  {
    // The function:
    // i7 Q  G  | o0 o2 o3
    // 0  S0 G0 | 1  -  -
    // -  S2 G0 | -  -  1
    // 0  S3 G1 | -  1  -
    // 1  S0 G1 | -  1  1
    // 1  S5 G1 | -  1  1
    // 1  S4 G1 | -  1  1
    // 0  S0 G3 | -  1  1
    // 0  S5 G1 | -  1  -
    // -  S1 G0 | -  -  1
    // -  S1 G1 | -  -  1
    // 0  S4 G3 | 1  1  -
    // 1  S4 G0 | -  -  1
    // -  S1 G3 | -  1  -
    // -  S1 G2 | -  1  -
    // 1  S0 G2 | -  -  1
    // 1  S5 G2 | -  -  1
    // 1  S3 G0 | -  1  -
    // 0  S0 G2 | -  -  1
    // 0  S3 G0 | -  1  1
    // 1  S5 G3 | -  1  1
    // 0  S4 G0 | -  -  1
    // 0  S4 G1 | -  1  1
    // 0  S5 G3 | -  1  1
    // 0  S0 G1 | -  1  1
    // 0  S3 G3 | -  1  1
    // 1  S3 G3 | -  1  -
    // 1  S4 G2 | -  -  1
    // 1  S4 G3 | -  1  1
    // 1  S3 G1 | 1  1  1
    // -  S0 G0 | -  1  1
    // 0  S5 G2 | 1  1  1
    // -  S4 G0 | 0  -  -
    // -  S4 G2 | 0  -  -
    // 0  S3 G1 | 0  -  -
    // -  S0 G3 | 0  -  -
    // -  S0 G2 | 0  -  -
    // 1  S0 G0 | 0  -  -
    // 1  S5 G2 | 0  -  -
    // -  S0 G1 | 0  -  -
    // -  S5 G3 | 0  -  -
    // -  S3 G3 | 0  -  -
    // -  S3 G0 | 0  -  -
    // -  S3 G2 | 0  -  -
    // -  S4 G1 | 0  -  -
    // -  S5 G0 | 0  -  -
    // -  S5 G1 | 0  -  -
    // 1  S4 G3 | 0  -  -
    // -  S1 G0 | 0  -  -
    // -  S1 G1 | 0  -  -
    // -  S1 G3 | 0  -  -
    // -  S1 G2 | 0  -  -
    // -  S2 G1 | 0  -  -
    // -  S2 G3 | 0  -  -
    // -  S0 G0 | -  -  -
    // -  S0 G1 | -  -  -
    // -  S0 G3 | -  -  -
    // -  S0 G2 | -  -  -
    // -  S5 G0 | -  -  -
    // -  S5 G1 | -  -  -
    // -  S5 G3 | -  -  -
    // -  S5 G2 | -  -  -
    // -  S2 G0 | -  -  -
    // -  S2 G1 | -  -  -
    // -  S2 G3 | -  -  -
    // -  S2 G2 | -  -  -
    // -  S3 G0 | -  -  -
    // -  S3 G1 | -  -  -
    // -  S3 G3 | -  -  -
    // -  S3 G2 | -  -  -
    // -  S4 G0 | -  -  -
    // -  S4 G1 | -  -  -
    // -  S4 G3 | -  -  -
    // -  S4 G2 | -  -  -
    // -  S2 G0 | 0  -  -
    // -  S2 G2 | 0  -  -
    // 0  S4 G2 | 0  0  0
    // 1  S5 G0 | -  0  -
    // 1  S5 G2 | -  0  -
    // 1  S4 G0 | -  0  -
    // 1  S4 G2 | -  0  -
    // -  S5 G0 | 0  0  0
    // -  S2 G1 | 0  0  0
    // -  S5 G0 | 0  0  -
    // -  S4 G0 | 0  0  -
    // -  S2 G1 | 0  0  -
    // 0  S3 G1 | 0  -  0
    // 0  S3 G2 | 0  -  0
    // -  S3 G2 | 0  0  0
    // -  S0 G2 | 0  0  -
    // 1  S0 G3 | 0  0  0
    // -  S1 G1 | -  0  -
    // -  S2 G1 | -  0  -
    // -  S1 G3 | 0  -  0
    // -  S1 G2 | 0  -  0
    // -  S2 G1 | 0  -  0
    // 0  S2 G1 | -  -  0
    // 0  S4 G3 | -  -  0
    // 0  S4 G2 | -  -  0
    // -  S2 G3 | 0  0  0
    // 1  S3 G0 | -  -  0
    // 1  S3 G3 | -  -  0
    // -  S1 G0 | 0  0  -
    // -  S1 G1 | 0  0  -
    // -  S2 G0 | 0  0  -
    // -  S2 G3 | 0  0  -
    // 0  S5 G0 | -  -  0
    // 0  S5 G1 | -  -  0
    // -  S1 G3 | -  -  0
    // -  S2 G3 | -  -  0
    // -  S1 G1 | -  -  -
    // -  S1 G3 | -  -  -
    // -  S1 G0 | -  -  -
    // -  S1 G2 | -  -  -

    // I = i7Q
    Blanket βI = Blanket.create("1,7,18,24,30,35,36,39,54,55,56,57,89; 2,52,53,62,63,64,65,74,75,82,85,92,95,96,99,104,105,109; 3,19,25,34,41,42,43,66,67,68,69,86,87,88; 4,15,30,35,36,37,39,54,55,56,57,89,90; 5,16,20,38,40,45,46,58,59,60,61,77,78,81,83; 6,12,27,28,32,33,44,47,70,71,72,73,79,80,84; 8,23,31,40,45,46,58,59,60,61,81,83,106,107; 9,10,13,14,48,49,50,51,91,93,94,102,103,108,110,111,112,113; 11,21,22,32,33,44,70,71,72,73,76,84,97,98; 17,26,29,41,42,43,66,67,68,69,88,100,101;");
    // Q = G
    Blanket βQ = Blanket.create("G0:1,2,9,12,17,19,21,30,32,37,42,45,48,54,58,62,66,70,74,77,79,81,83,84,100,102,104,106,112; G1:3,4,5,6,8,10,22,24,29,34,39,44,46,49,52,55,59,63,67,71,82,85,86,91,92,95,96,103,107,110; G2:14,15,16,18,27,31,33,36,38,43,51,57,61,65,69,73,75,76,78,80,87,88,89,94,98,113; G3:7,11,13,20,23,25,26,28,35,40,41,47,50,53,56,60,64,68,72,90,93,97,99,101,105,108,109,111;");
    // G = o0
    Blanket βG = Blanket.create("0:2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113; 1:1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,79,80,91,92,96,97,98,100,101,106,107,108,109,110,111,112,113;");
    // H = o2o3
    Blanket βH = Blanket.create("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,110,111,112,113; 1,2,9,10,12,15,16,18,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,83,84,85,89,91,92,102,103,104,105,110,111,112,113; 1,3,8,11,13,14,17,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,86,87,93,94,95,96,97,98,100,101,106,107,108,109,110,111,112,113; 1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113;");
    DecompositionBlankets decomposition = Decompositions.parallelDecomposition(βI, βQ, βG, βH);
    Assertions.assertThat(decomposition).isNotNull();

    Blanket βQv = decomposition.QvJoinedWithQu && decomposition.QvPartial != null ? decomposition.Qu.BxB(decomposition.QvPartial) : decomposition.Qv;
    Blanket βQu = decomposition.QuJoinedWithQv && decomposition.QuPartial != null ? decomposition.Qv.BxB(decomposition.QuPartial) : decomposition.Qu;

    Assertions.assertThat(decomposition.I.BxB(βQv).BleB(decomposition.G)).isTrue();   // βI x βQv <= βG - true
    Assertions.assertThat(decomposition.I.BxB(βQu).BleB(decomposition.H)).isTrue();   // βI x βQu <= βH - true
    Assertions.assertThat(decomposition.Qv.BxB(decomposition.Qu).BeqB(βQ)).isTrue();  // βQv x βQu = βQ - true
  }

  @Test
  public void parallelDecomposition_test2()
  {
    // The function:
    // i6 G  q2 q3 q4 | o10 o11 o12
    // -  G0 0  0  1  | 1   -   1
    // -  G2 0  0  1  | 1   -   1
    // 1  G0 0  1  1  | 1   -   1
    // 1  G0 0  1  0  | -   1   -
    // 0  G0 0  0  0  | -   1   -
    // 0  G0 1  1  0  | -   1   -
    // 0  G2 0  0  0  | -   1   1
    // -  G6 0  0  1  | -   1   -
    // -  G7 0  0  1  | -   1   -
    // 0  G1 1  1  0  | 1   -   1
    // -  G3 0  0  1  | 1   -   1
    // -  G1 0  1  0  | -   1   -
    // 1  G0 1  1  0  | -   1   -
    // 1  G5 0  1  0  | -   1   1
    // 1  G3 1  1  0  | -   1   1
    // 0  G0 0  1  0  | -   1   1
    // 0  G5 1  1  0  | -   -   1
    // 0  G3 1  1  0  | -   1   -
    // 0  G3 0  1  0  | -   -   1
    // 1  G3 0  1  0  | 1   -   1
    // 1  G6 0  1  1  | -   -   1
    // 1  G7 0  1  1  | -   -   1
    // 0  G3 0  1  1  | -   1   1
    // 0  G1 0  1  0  | -   1   1
    // 0  G7 0  1  1  | -   -   1
    // 1  G3 0  1  1  | -   -   1
    // 1  G0 0  0  0  | -   -   1
    // 1  G2 0  0  0  | -   -   1
    // 0  G5 0  1  0  | -   -   1
    // -  G5 0  0  0  | -   -   1
    // -  G1 1  1  0  | -   0   -
    // -  G5 1  1  0  | -   0   -
    // -  G0 0  0  1  | -   0   -
    // -  G3 0  0  1  | -   0   -
    // -  G5 0  0  0  | -   0   -
    // -  G0 0  0  1  | -   -   -
    // -  G2 0  0  1  | -   -   -
    // -  G0 1  1  0  | -   -   -
    // -  G1 1  1  0  | -   -   -
    // -  G3 1  1  0  | -   -   -
    // -  G5 1  1  0  | -   -   -
    // -  G5 0  0  1  | -   -   -
    // -  G3 0  0  1  | -   -   -
    // -  G6 0  0  1  | -   -   -
    // -  G7 0  0  1  | -   -   -
    // -  G5 0  0  0  | -   -   -
    // -  G0 0  0  0  | -   -   -
    // -  G2 0  0  0  | -   -   -
    // -  G0 0  1  1  | -   -   -
    // -  G3 0  1  1  | -   -   -
    // -  G6 0  1  1  | -   -   -
    // -  G7 0  1  1  | -   -   -
    // -  G0 0  1  0  | -   -   -
    // -  G1 0  1  0  | -   -   -
    // -  G3 0  1  0  | -   -   -
    // -  G5 0  1  0  | -   -   -
    // 1  G1 1  1  0  | 0   0   0
    // 1  G5 1  1  0  | 0   0   0
    // 0  G0 0  1  1  | -   -   0
    // 0  G6 0  1  1  | -   -   0
    // -  G2 0  0  1  | -   0   -
    // -  G5 0  0  1  | -   0   -
    // 0  G0 0  1  1  | 0   -   -
    // -  G3 0  1  1  | 0   -   -
    // -  G5 1  1  0  | 0   0   -
    // -  G1 0  1  0  | 0   -   -
    // -  G5 0  1  0  | 0   -   -
    // -  G5 0  0  1  | 0   -   -
    // -  G5 0  0  1  | 0   0   -
    // -  G5 0  0  0  | 0   0   -
    // -  G0 0  0  0  | 0   -   -
    // -  G2 0  0  0  | 0   -   -
    // -  G0 1  1  0  | 0   -   -
    // -  G3 1  1  0  | 0   -   -
    // -  G6 0  1  1  | 0   -   -
    // -  G7 0  1  1  | 0   -   -
    // 0  G3 0  1  0  | 0   -   -
    // -  G0 0  1  0  | 0   -   -
    // -  G5 0  0  1  | 0   -   0
    // -  G6 0  0  1  | 0   -   0
    // -  G7 0  0  1  | 0   -   0
    // 0  G0 0  1  1  | -   0   -
    // 0  G5 0  1  0  | -   0   -
    // 1  G0 0  1  1  | -   0   -
    // 1  G3 0  1  1  | -   0   -
    // -  G6 0  1  1  | -   0   -
    // -  G7 0  1  1  | -   0   -
    // -  G3 0  1  0  | -   0   -
    // 1  G0 0  0  0  | -   0   -
    // 1  G2 0  0  0  | -   0   -
    // 1  G1 0  1  0  | -   -   0
    // 0  G6 0  0  1  | -   -   0
    // 1  G0 0  1  0  | -   -   0
    // 1  G7 0  0  1  | -   -   0
    // 0  G3 1  1  0  | -   -   0
    // -  G0 1  1  0  | -   -   0
    // -  G5 0  0  1  | -   -   0
    // 0  G0 0  0  0  | -   -   0
    // 0  G7 0  0  1  | -   -   0
    // -  G5 0  0  1  | 0   0   0

    // I = i6q2q3q4
    Blanket βI = Blanket.create("1,2,8,9,11,33,34,36,37,42,43,44,45,61,62,68,69,79,80,81,92,97,99,100; 1,2,8,9,11,33,34,36,37,42,43,44,45,61,62,68,69,79,80,81,94,97,100; 3,21,22,26,49,50,51,52,64,75,76,84,85,86,87; 4,12,14,20,53,54,55,56,66,67,78,88,91,93; 5,7,30,35,46,47,48,70,71,72,98; 6,10,17,18,31,32,38,39,40,41,65,73,74,95,96; 12,16,19,24,29,53,54,55,56,66,67,77,78,83,88; 13,15,31,32,38,39,40,41,57,58,65,73,74,96; 23,25,49,50,51,52,59,60,63,64,75,76,82,86,87; 27,28,30,35,46,47,48,70,71,72,89,90;");
    // Q = G
    Blanket βQ = Blanket.create("G0:1,3,4,5,6,13,16,27,33,36,38,47,49,53,59,63,71,73,78,82,84,89,93,96,98; G1:10,12,24,31,39,54,57,66,91; G2:2,7,28,37,48,61,72,90; G3:11,15,18,19,20,23,26,34,40,43,50,55,64,74,77,85,88,95; G5:14,17,29,30,32,35,41,42,46,56,58,62,65,67,68,69,70,79,83,97,100; G6:8,21,44,51,60,75,80,86,92; G7:9,22,25,45,52,76,81,87,94,99;");
    // G = o12
    Blanket βG = Blanket.create("0:4,5,6,8,9,12,13,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100; 1:1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,89,90;");
    // H = o10o11
    Blanket βH = Blanket.create("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,91,92,93,94,95,96,97,98,99; 1,2,3,10,11,17,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99; 4,5,6,7,8,9,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,63,64,66,67,68,71,72,73,74,75,76,77,78,79,80,81,91,92,93,94,95,96,97,98,99; 17,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;");
    DecompositionBlankets decomposition = Decompositions.parallelDecomposition(βI, βQ, βG, βH);

    Assertions.assertThat(decomposition).isNotNull();

    Blanket βQv = decomposition.QvJoinedWithQu && decomposition.QvPartial != null ? decomposition.Qu.BxB(decomposition.QvPartial) : decomposition.Qv;
    Blanket βQu = decomposition.QuJoinedWithQv && decomposition.QuPartial != null ? decomposition.Qv.BxB(decomposition.QuPartial) : decomposition.Qu;

    Assertions.assertThat(decomposition.I.BxB(βQv).BleB(decomposition.G)).isTrue();   // βI x βQv <= βG - true
    Assertions.assertThat(decomposition.I.BxB(βQu).BleB(decomposition.H)).isTrue();   // βI x βQu <= βH - true
    Assertions.assertThat(decomposition.Qv.BxB(decomposition.Qu).BeqB(βQ)).isTrue();  // βQv x βQu = βQ - true
  }

  @Test
  public void parallelDecomposition_test3()
  {
    // In this test the function from parallelDecomposition_test2() method has been slightly modified: inputs q2, q3 and q4 have been encoded through input Q.
    // The function:
    // i6 G  Q  | o10 o11 o12
    // -  G0 S1 | 1   -   1
    // -  G2 S1 | 1   -   1
    // 1  G0 S2 | 1   -   1
    // 1  G0 S3 | -   1   -
    // 0  G0 S0 | -   1   -
    // 0  G0 S4 | -   1   -
    // 0  G2 S0 | -   1   1
    // -  G6 S1 | -   1   -
    // -  G7 S1 | -   1   -
    // 0  G1 S4 | 1   -   1
    // -  G3 S1 | 1   -   1
    // -  G1 S3 | -   1   -
    // 1  G0 S4 | -   1   -
    // 1  G5 S3 | -   1   1
    // 1  G3 S4 | -   1   1
    // 0  G0 S3 | -   1   1
    // 0  G5 S4 | -   -   1
    // 0  G3 S4 | -   1   -
    // 0  G3 S3 | -   -   1
    // 1  G3 S3 | 1   -   1
    // 1  G6 S2 | -   -   1
    // 1  G7 S2 | -   -   1
    // 0  G3 S2 | -   1   1
    // 0  G1 S3 | -   1   1
    // 0  G7 S2 | -   -   1
    // 1  G3 S2 | -   -   1
    // 1  G0 S0 | -   -   1
    // 1  G2 S0 | -   -   1
    // 0  G5 S3 | -   -   1
    // -  G5 S0 | -   -   1
    // -  G1 S4 | -   0   -
    // -  G5 S4 | -   0   -
    // -  G0 S1 | -   0   -
    // -  G3 S1 | -   0   -
    // -  G5 S0 | -   0   -
    // -  G0 S1 | -   -   -
    // -  G2 S1 | -   -   -
    // -  G0 S4 | -   -   -
    // -  G1 S4 | -   -   -
    // -  G3 S4 | -   -   -
    // -  G5 S4 | -   -   -
    // -  G5 S1 | -   -   -
    // -  G3 S1 | -   -   -
    // -  G6 S1 | -   -   -
    // -  G7 S1 | -   -   -
    // -  G5 S0 | -   -   -
    // -  G0 S0 | -   -   -
    // -  G2 S0 | -   -   -
    // -  G0 S2 | -   -   -
    // -  G3 S2 | -   -   -
    // -  G6 S2 | -   -   -
    // -  G7 S2 | -   -   -
    // -  G0 S3 | -   -   -
    // -  G1 S3 | -   -   -
    // -  G3 S3 | -   -   -
    // -  G5 S3 | -   -   -
    // 1  G1 S4 | 0   0   0
    // 1  G5 S4 | 0   0   0
    // 0  G0 S2 | -   -   0
    // 0  G6 S2 | -   -   0
    // -  G2 S1 | -   0   -
    // -  G5 S1 | -   0   -
    // 0  G0 S2 | 0   -   -
    // -  G3 S2 | 0   -   -
    // -  G5 S4 | 0   0   -
    // -  G1 S3 | 0   -   -
    // -  G5 S3 | 0   -   -
    // -  G5 S1 | 0   -   -
    // -  G5 S1 | 0   0   -
    // -  G5 S0 | 0   0   -
    // -  G0 S0 | 0   -   -
    // -  G2 S0 | 0   -   -
    // -  G0 S4 | 0   -   -
    // -  G3 S4 | 0   -   -
    // -  G6 S2 | 0   -   -
    // -  G7 S2 | 0   -   -
    // 0  G3 S3 | 0   -   -
    // -  G0 S3 | 0   -   -
    // -  G5 S1 | 0   -   0
    // -  G6 S1 | 0   -   0
    // -  G7 S1 | 0   -   0
    // 0  G0 S2 | -   0   -
    // 0  G5 S3 | -   0   -
    // 1  G0 S2 | -   0   -
    // 1  G3 S2 | -   0   -
    // -  G6 S2 | -   0   -
    // -  G7 S2 | -   0   -
    // -  G3 S3 | -   0   -
    // 1  G0 S0 | -   0   -
    // 1  G2 S0 | -   0   -
    // 1  G1 S3 | -   -   0
    // 0  G6 S1 | -   -   0
    // 1  G0 S3 | -   -   0
    // 1  G7 S1 | -   -   0
    // 0  G3 S4 | -   -   0
    // -  G0 S4 | -   -   0
    // -  G5 S1 | -   -   0
    // 0  G0 S0 | -   -   0
    // 0  G7 S1 | -   -   0
    // -  G5 S1 | 0   0   0

    // I = i6G
    Blanket βI = Blanket.create("1,3,4,13,27,33,36,38,47,49,53,71,73,78,84,89,93,96; 1,5,6,16,33,36,38,47,49,53,59,63,71,73,78,82,96,98; 2,7,37,48,61,72; 2,28,37,48,61,72,90; 8,21,44,51,75,80,86; 8,44,51,60,75,80,86,92; 9,22,45,52,76,81,87,94; 9,25,45,52,76,81,87,99; 10,12,24,31,39,54,66; 11,15,20,26,34,40,43,50,55,64,74,85,88; 11,18,19,23,34,40,43,50,55,64,74,77,88,95; 12,31,39,54,57,66,91; 14,30,32,35,41,42,46,56,58,62,65,67,68,69,70,79,97,100; 17,29,30,32,35,41,42,46,56,62,65,67,68,69,70,79,83,97,100;");
    // Q = Q
    Blanket βQ = Blanket.create("S0:5,7,27,28,30,35,46,47,48,70,71,72,89,90,98; S1:1,2,8,9,11,33,34,36,37,42,43,44,45,61,62,68,69,79,80,81,92,94,97,99,100; S2:3,21,22,23,25,26,49,50,51,52,59,60,63,64,75,76,82,84,85,86,87; S3:4,12,14,16,19,20,24,29,53,54,55,56,66,67,77,78,83,88,91,93; S4:6,10,13,15,17,18,31,32,38,39,40,41,57,58,65,73,74,95,96;");
    // G = o12
    Blanket βG = Blanket.create("0:4,5,6,8,9,12,13,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100; 1:1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,89,90;");
    // H = o10o11
    Blanket βH = Blanket.create("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,91,92,93,94,95,96,97,98,99; 1,2,3,10,11,17,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99; 4,5,6,7,8,9,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,63,64,66,67,68,71,72,73,74,75,76,77,78,79,80,81,91,92,93,94,95,96,97,98,99; 17,19,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;");
    DecompositionBlankets decomposition = Decompositions.parallelDecomposition(βI, βQ, βG, βH);

    Assertions.assertThat(decomposition).isNotNull();

    Blanket βQv = decomposition.QvJoinedWithQu && decomposition.QvPartial != null ? decomposition.Qu.BxB(decomposition.QvPartial) : decomposition.Qv;
    Blanket βQu = decomposition.QuJoinedWithQv && decomposition.QuPartial != null ? decomposition.Qv.BxB(decomposition.QuPartial) : decomposition.Qu;

    Assertions.assertThat(decomposition.I.BxB(βQv).BleB(decomposition.G)).isTrue();   // βI x βQv <= βG - true
    Assertions.assertThat(decomposition.I.BxB(βQu).BleB(decomposition.H)).isTrue();   // βI x βQu <= βH - true
    Assertions.assertThat(decomposition.Qv.BxB(decomposition.Qu).BeqB(βQ)).isTrue();  // βQv x βQu = βQ - true
  }
}
